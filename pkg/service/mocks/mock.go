// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/max-sanch/BotFreelancer-core"
)

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChannel) Create(channelInput core.ChannelInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", channelInput)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChannelMockRecorder) Create(channelInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChannel)(nil).Create), channelInput)
}

// Delete mocks base method.
func (m *MockChannel) Delete(apiID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", apiID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockChannelMockRecorder) Delete(apiID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChannel)(nil).Delete), apiID)
}

// GetByApiId mocks base method.
func (m *MockChannel) GetByApiId(apiId int) (core.ChannelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByApiId", apiId)
	ret0, _ := ret[0].(core.ChannelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByApiId indicates an expected call of GetByApiId.
func (mr *MockChannelMockRecorder) GetByApiId(apiId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByApiId", reflect.TypeOf((*MockChannel)(nil).GetByApiId), apiId)
}

// GetTasks mocks base method.
func (m *MockChannel) GetTasks() ([]core.ChannelTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks")
	ret0, _ := ret[0].([]core.ChannelTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockChannelMockRecorder) GetTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockChannel)(nil).GetTasks))
}

// Update mocks base method.
func (m *MockChannel) Update(channelInput core.ChannelInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", channelInput)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockChannelMockRecorder) Update(channelInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChannel)(nil).Update), channelInput)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(userInput core.UserInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userInput)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(userInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), userInput)
}

// GetByTgId mocks base method.
func (m *MockUser) GetByTgId(tgId int) (core.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTgId", tgId)
	ret0, _ := ret[0].(core.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTgId indicates an expected call of GetByTgId.
func (mr *MockUserMockRecorder) GetByTgId(tgId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTgId", reflect.TypeOf((*MockUser)(nil).GetByTgId), tgId)
}

// GetTasks mocks base method.
func (m *MockUser) GetTasks() ([]core.UserTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks")
	ret0, _ := ret[0].([]core.UserTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockUserMockRecorder) GetTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockUser)(nil).GetTasks))
}

// Update mocks base method.
func (m *MockUser) Update(userInput core.UserInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userInput)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserMockRecorder) Update(userInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUser)(nil).Update), userInput)
}
